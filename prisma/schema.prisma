// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id
  dcUserName String
  avatar     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  admin      Boolean  @default(false)

  comments   Comment[]
  sessionIds SessionId[]
}

model SessionId {
  id String @id @default(uuid())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Category {
  id     String  @id
  name   String  @unique
  topics Topic[]
}

model Topic {
  id            String         @id
  category      Category       @relation(references: [id], fields: [categoryId])
  categoryId    String
  name          String         @unique
  resourceItems ResourceItem[]
}

model ResourceItem {
  id        String   @id
  title     String
  topic     Topic    @relation(references: [id], fields: [topicId])
  topicId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  description   String?
  content       String
  comments      Comment[]
  problems      Problem[]
  focusProblems Problem[] @relation("FocusProblem")
}

model Problem {
  id             String @id
  title          String
  url            String
  ratingEstimate Int
  resourceItems  ResourceItem[]
  focusResources ResourceItem[] @relation("FocusProblem")
}

model Comment {
  id         String       @id @default(uuid())
  resource   ResourceItem @relation(fields: [resourceId], references: [id])
  resourceId String

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  subComments     Comment[] @relation("CommentToComment")
  parentComment   Comment?  @relation(fields: [parentCommentId], references: [id], name: "CommentToComment")
  parentCommentId String?
}
